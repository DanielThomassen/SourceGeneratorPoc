using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ModelGenerator
{
    [Generator]
    public class ViewModelGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUG
            if (!Debugger.IsAttached)
            {
                //Debugger.Launch();
            }
#endif
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (!(context.SyntaxContextReceiver is SyntaxReceiver receiver))
            {
                return;
            }
            
            
            var builder = new StringBuilder();
            foreach (var symbol in receiver.Symbols)
            {
                var name = symbol.ContainingNamespace.ConstituentNamespaces.Select(x => x.Name).First();
                var content = BuildClass(name, symbol);
                context.AddSource(symbol.Name + "ViewModel", SourceText.From(content, Encoding.UTF8));
                builder.Clear();
            }
        }

        private string BuildClass(string rootNamespace, INamedTypeSymbol symbol)
        {
            var sb = new StringBuilder();
            
            sb.AppendFormat(@"

/*
 * This file was generated by ViewModelGenerator version 0.0.1
 * Do not modify this file manually
 */
namespace {0}
{{
    public partial class {1}ViewModel
    {{", rootNamespace, symbol.Name);

            foreach (var member in symbol.GetMembers())
            {
                if (!(member is IMethodSymbol method) || method.MethodKind != MethodKind.PropertyGet)
                {
                    continue;
                }
                var f = method.ToDisplayParts();
                var propName = f.Skip(f.Length - 3).Take(1).First().ToString();
                var type = method.ReturnType;
                string typeName = null;
                var ns = type.ContainingNamespace.IsGlobalNamespace ? string.Empty : type.ContainingNamespace.ToString() + '.';
                switch (type.TypeKind)
                {   
                    case TypeKind.Class:
                        if (type.SpecialType == SpecialType.System_String)
                        {
                            typeName = "string";
                            ns = string.Empty;
                        }
                        else
                        {
                            if (!type.Name.EndsWith("ViewModel"))
                            {
                                ns = string.Empty;
                                typeName = type.Name + "ViewModel";
                            }
                        }
                        break;
                    case TypeKind.Enum:
                    case TypeKind.Interface:
                    case TypeKind.Array:
                        continue;
                        break;
                    default:
                        typeName = type.Name;
                        break;
                }
                
                sb.AppendFormat(@"
            public {2}{0} {1} {{ get; set; }}
", typeName, propName, ns);


            }

            sb.Append(@"
    }
}
");
            var result = sb.ToString();
            return result;
        }
    }

    public class SyntaxReceiver : ISyntaxContextReceiver
    {
        public List<INamedTypeSymbol> Symbols { get; set; } = new List<INamedTypeSymbol>();


        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
            if (context.Node is ClassDeclarationSyntax classDeclarationSyntax 
                && classDeclarationSyntax.AttributeLists.Count > 0
                && classDeclarationSyntax.AttributeLists.Any(
                    x => x.Attributes.Any(
                        y => context.SemanticModel.GetTypeInfo(y).Type?.ToDisplayString() == "ModelGenerator.HasViewModelAttribute")))
            {
                
                var symbol = context.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax) as INamedTypeSymbol;
                Symbols.Add(symbol);
            }
        }
    }
}
